# Security
#

# Secret used to encode session data in localstorage. (Required)
# This should be a random alphanumeric sequence. If you don't know what to put use the output of 'openssl rand -hex 20' on a unix terminal.
SECRET_KEY=
# Secret used to encode JWT secrets between WorkAdventure and the XMPP server. (Required)
# The same type as above, a random alphanumeric sequence for your instance.
EJABBERD_JWT_SECRET=

#
# Networking
#

# Subdomains
# The different services needs different entrypoints, so all of them must be inserted in the DNS tables at you domain provider.
# The Workadventure instance will be available later at the FRONT_HOST domain.
# The PUSHER_HOST and the FRONT_HOST must be identical.
FRONT_HOST=play.workadventure.localhost
CHAT_HOST=chat.workadventure.localhost
PUSHER_HOST=play.workadventure.localhost
BACK_HOST=api.workadventure.localhost
MAP_STORAGE_HOST=map-storage.workadventure.localhost
MAPS_HOST=maps.workadventure.localhost
ICON_HOST=icon.workadventure.localhost
UPLOADER_HOST=uploader.workadventure.localhost
EJABBERD_HOST=ejabberd.workadventure.localhost

#
# Basic configuration
#

# The directory to store data in (Will be create automatically)
DATA_DIR=./wa

# The URL used by default, in the form: "/_/global/map/url.json"
START_ROOM_URL=/_/global/thecodingmachine.github.io/workadventure-map-starter-kit/map.json

MAX_PER_GROUP=4
MAX_USERNAME_LENGTH=10
DISABLE_ANONYMOUS=false

# The version the docker images of Workadventure
# The versions can be checked on https://hub.docker.com/r/thecodingmachine/workadventure-play/tags
VERSION=v1.14.9

# Docker Restart Policy
# This will restart the container after a host reboot or an internal crash, when "unless-stopped" is kept.
RESTART_POLICY=unless-stopped

#
# Jitsi (for the meeting rooms)
#

# Specify a running jitsi instance.
# This can also be an public one, like the pre-defined.
JITSI_URL=meet.jit.si

# IF your Jitsi environment has authentication set up (mostly not true for public ones),
# you set JITSI_PRIVATE_MODE needs to be set to "true"
# and you MUST provide a SECRET_JITSI_KEY which is the JWT secret jitsi expects
JITSI_PRIVATE_MODE=false
JITSI_ISS=
SECRET_JITSI_KEY=

#
# Turn/Stun
# (necessary for near-field voice chat)
#

# This repository allows you to setup a own TURN/STUN server, since we think self-hosting this improves the protection level of the conversations a lot.
# The TURN server will relay everything between the members of a near-field voice chat, and we feel much better by self-hosting it.
# Also the provided TURN docker-compose will use the ports 80 (and maybe in the future 443) to be available also in firewalled networks.

# To check the correct function of TURN or STUN servers use https://webrtc.github.io/samples/src/content/peerconnection/trickle-ice/.
# Enter you turn server with the credentials from below and the stun server as well.
# If the list of ips shows one line which hast the 'Type' 'srflx' the STUN server works correctly.
# If the list of ips shows one line which hast the 'Type' 'relay' the TURN server works correctly.
# If those lines don't appear look at the errors on the bottom of the page, which gave me useful troubleshoting hints.

# URL of the TURN server (needed to "punch a hole" through some networks for P2P connections)
# The variable allways needs to have the format 'turn:<host>:<port>'.
# The host is the IP oder dns name of the machine the TURN server runs. (examples: 'turn:127.0.15.25:80' or 'turn:turn.me.on:443')
TURN_SERVER=turn:<host>:<port>

# This need to be the ip of your TURN host machine.
# No DNS name is possible, since this will be used by the TURN it-self. (example:  '127.0.15.25')
TURN_SERVER_EXTERNAL_IP=

# A random secret for the connection to the TURN server.
# This is your choice when using this repository.
# It should be a random alphanumeric sequence. If you don't know what to put use the output of 'openssl rand -hex 20' on a unix terminal.
TURN_STATIC_AUTH_SECRET=

# When connection to a TURN server with user and password. (Not needed with the TURN server included)
# TURN_USER=
# TURN_PASSWORD=

# URL of the STUN server
# When using the provided coturn TURN server this can be the same host as the TURN_SERVER variable.
# Example: 'stun:127.0.15.25:80' or 'stun:turn.me.on:443'
STUN_SERVER=stun:<host>:<port>

#
# Certificate config
#

# The email address used by Let's encrypt to send renewal warnings
# You will get a warning mail when the certificate will expire, nothing more.
ACME_EMAIL=

#
# Ejabberd/XMPP
# (necessary for chat)
#

# The user for admin tasks. Leave this on the preset 'admin', unless you know what you are doing.
# The password can be again a random alphanumeric sequence. You should already know how to generate one ;)
EJABBERD_USER=admin
EJABBERD_PASSWORD=

# If you don't want ejabberd to spam you docker logs, leave this at 3. (for debugging -> 5)
EJABBERD_LOG_LEVEL=3

#
# Advanced configuration
# Generally does not need to be changed
#

# Networking
# Leave this two ports for workadventure on the defaults, unless you know what you are doing.
HTTP_PORT=80
HTTPS_PORT=443

# Workadventure settings
DISABLE_NOTIFICATIONS=false
SKIP_RENDER_OPTIMIZATIONS=false
STORE_VARIABLES_FOR_LOCAL_MAPS=true

# Prometheus settings
## Uncomment this to enable the /metrics Prometheus endpoint.
## To hit this endpoint, you will need to configure Prometheus with:
## authorization:
##   type: Bearer
##   credentials: "[The value of PROMETHEUS_AUTHORIZATION_TOKEN env variable]"
#PROMETHEUS_AUTHORIZATION_TOKEN=my_password

# Debugging options
# This will draw debug graphics on the Workadventure UI.
DEBUG_MODE=false
# Will affect the logging amount.
LOG_LEVEL=WARN

# The server id is used to uniquely identify a cluster of WorkAdventure servers
# It is only used in rare circumstances. You can safely keep it empty.
# If you don't want to -> random alphanumeric sequence.
SERVER_ID=

#
# CHAT
#

# Enable / disable chat
ENABLE_CHAT=true
# Enable / disable upload of file in chat.
# If enabled the Uploader section below needs to be configured as well.
ENABLE_CHAT_UPLOAD=false
# Chat max uploadable file size (Byte)
UPLOAD_MAX_FILESIZE=10485760
ENABLE_CHAT_ONLINE_LIST=true
ENABLE_CHAT_DISCONNECTED_LIST=true
# Max day of chat history that can be fetched by users
## No restriction is : 0 or not defined value
# MAX_HISTORY_CHAT=0

# Embedely key api for rich media embeds used in the chat service
# Can be left empty.
EMBEDLY_KEY=

# The maximum time to live of player variables for logged players, expressed in seconds (no limit by default).
# Use "-1" for infinity.
# Note that anonymous players don't have any TTL limit because their data is stored in local storage, not in Redis database.
PLAYER_VARIABLES_MAX_TTL=-1

#
# UPLOADER
# (uploading Chat files)
#

# Here you have two options as storage backend: AWS or a Redis server.
# We can't provide any knowledge here, since we don't enabled uploads in the chat.

# AWS environement variable for uploader 
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_DEFAULT_REGION=
AWS_BUCKET=
AWS_ENDPOINT=
# Time for which signed urls are valid (in seconds)
# UPLOADER_AWS_SIGNED_URL_EXPIRATION=60

# Redis for uploader service of WorkAdventure
## The uploader service stores all files uploaded by the chat service
## 2 possibilities to setup the uploader storage: AWS, REDIS
### AWS with all environement variable AWS
### Redis with this environment variable
UPLOADER_REDIS_HOST=
UPLOADER_REDIS_PORT=
UPLOADER_REDIS_DB_NUMBER=0